#include <iostream>
#include <string>
#include <queue>
#include <stack>

using namespace std;

// Core structures
struct FoodItem {
    string name;
    float calories, protein, carbs, fat;
    
    FoodItem(string n, float c, float p, float cb, float f) : 
        name(n), calories(c), protein(p), carbs(cb), fat(f) {}
};

struct MealRecord {
    string mealType;
    FoodItem food;
    float portion;
    
    MealRecord(string type, FoodItem f, float p) : 
        mealType(type), food(f), portion(p) {}
};

struct UserProfile {
    string name, gender, goal;
    int age;
    float weight, height;
    float dailyCalorieTarget, dailyProteinTarget, dailyCarbsTarget, dailyFatTarget;
    float currentCalories, currentProtein, currentCarbs, currentFat;
    float breakfastCalories, lunchCalories, dinnerCalories, snackCalories;
    
    UserProfile() : name(""), gender(""), goal("maintain"), age(0), weight(0), height(0),
        dailyCalorieTarget(0), dailyProteinTarget(0), dailyCarbsTarget(0), dailyFatTarget(0),
        currentCalories(0), currentProtein(0), currentCarbs(0), currentFat(0),
        breakfastCalories(0), lunchCalories(0), dinnerCalories(0), snackCalories(0) {}
};

class NutritionTracker {
private:
    UserProfile user;
    queue<FoodItem> foodDB;
    stack<MealRecord> dailyFoods;
    
    // Calculate BMR using Mifflin-St Jeor Equation
    float calculateBMR() {
        if (user.gender == "male" || user.gender == "m") {
            return (10 * user.weight) + (6.25 * user.height) - (5 * user.age) + 5;
        } else {
            return (10 * user.weight) + (6.25 * user.height) - (5 * user.age) - 161;
        }
    }
    
    // Calculate nutrition targets based on user profile
    void calculateNutritionTargets() {
        float bmr = calculateBMR();
        float tdee = bmr * 1.4; // Moderate activity multiplier
        
        if (user.goal == "lose") {
            user.dailyCalorieTarget = tdee - 500;
            user.dailyProteinTarget = user.weight * 2.2;
        } else if (user.goal == "gain") {
            user.dailyCalorieTarget = tdee + 500;
            user.dailyProteinTarget = user.weight * 1.8;
        } else {
            user.dailyCalorieTarget = tdee;
            user.dailyProteinTarget = user.weight * 1.6;
        }
        
        if (user.dailyCalorieTarget < 1200) user.dailyCalorieTarget = 1200;
        
        user.dailyFatTarget = (user.dailyCalorieTarget * 0.25) / 9;
        user.dailyCarbsTarget = (user.dailyCalorieTarget - (user.dailyProteinTarget * 4) - (user.dailyFatTarget * 9)) / 4;
    }
    
    // Initialize the food database with common foods
    void initializeDefaultFoods() {
        foodDB.push(FoodItem("Oatmeal (1 bowl)", 150, 5, 27, 3));
        foodDB.push(FoodItem("Eggs (2)", 140, 12, 1.2, 10));
        foodDB.push(FoodItem("Greek Yogurt (1 cup)", 100, 10, 4, 0.7));
        foodDB.push(FoodItem("Chicken Breast (100g)", 165, 31, 0, 3.6));
        foodDB.push(FoodItem("Salmon (100g)", 208, 20, 0, 13));
        foodDB.push(FoodItem("Rice (1 cup)", 200, 4, 45, 0.4));
        foodDB.push(FoodItem("Mixed Vegetables (1 cup)", 80, 2, 17, 0.5));
        foodDB.push(FoodItem("Apple", 95, 0.5, 25, 0.3));
        foodDB.push(FoodItem("Almonds (10)", 70, 2.5, 2.5, 6));
        foodDB.push(FoodItem("Protein Bar", 200, 15, 20, 7));
    }

public:
    NutritionTracker() {
        initializeDefaultFoods();
    }
    
    string getStringInput(const string& prompt) {
        string value;
        cout << prompt;
        getline(cin, value);
        return value;
    }
    
    template<typename T>
    T getInput(const string& prompt, T minValue) {
        T value;
        while (true) {
            cout << prompt;
            if (cin >> value && value >= minValue) {
                cin.ignore();
                return value;
            } else {
                cout << "Invalid input. Please try again." << endl;
                cin.clear();
                cin.ignore(1000, '\n');
            }
        }
    }
    
    void setupUserProfile() {
        cout << "\n===== NUTRITION TRACKER SETUP =====" << endl;
        
        user.name = getStringInput("Enter your name: ");
        user.age = getInput<int>("Enter your age: ", 1);
        user.gender = getStringInput("Enter your gender (male/female): ");
        user.weight = getInput<float>("Enter your weight (kg): ", 20.0f);
        user.height = getInput<float>("Enter your height (cm): ", 100.0f);
        
        cout << "\nFitness Goals:\n1. Lose Weight\n2. Maintain Weight\n3. Gain Weight\n";
        int goalChoice = getInput<int>("Select your goal (1-3): ", 1);
        
        switch (goalChoice) {
            case 1: user.goal = "lose"; break;
            case 2: user.goal = "maintain"; break;
            case 3: user.goal = "gain"; break;
            default: user.goal = "maintain";
        }
        
        calculateNutritionTargets();
        cout << "\nProfile created successfully!" << endl;
    }
    
    void displayUserProfile() {
        cout << "\n===== USER PROFILE =====" << endl;
        cout << "Name: " << user.name << endl;
        cout << "Age: " << user.age << endl;
        cout << "Gender: " << user.gender << endl;
        cout << "Weight: " << user.weight << " kg" << endl;
        cout << "Height: " << user.height << " cm" << endl;
        cout << "Goal: " << (user.goal == "lose" ? "Weight Loss" : 
                           user.goal == "gain" ? "Weight Gain" : "Weight Maintenance") << endl;
        
        cout << "\n===== DAILY TARGETS =====" << endl;
        cout << "Calories: " << int(user.dailyCalorieTarget) << " kcal" << endl;
        cout << "Protein: " << user.dailyProteinTarget << "g" << endl;
        cout << "Carbs: " << user.dailyCarbsTarget << "g" << endl;
        cout << "Fat: " << user.dailyFatTarget << "g" << endl;
        
        cout << "\nPress Enter to continue...";
        cin.get();
    }
    
    void displayAllFoods() {
        cout << "===== FOOD DATABASE =====" << endl;
        
        queue<FoodItem> tempQueue = foodDB;
        int count = 1;
        
        while (!tempQueue.empty()) {
            FoodItem food = tempQueue.front();
            cout << count++ << ". " << food.name << " - "
                 << food.calories << " cal, "
                 << food.protein << "g protein, "
                 << food.carbs << "g carbs, "
                 << food.fat << "g fat" << endl;
            tempQueue.pop();
        }
        
        cout << "\nPress Enter to continue...";
        cin.get();
    }
    
    void addFoodByMeal() {
        cout << "\n===== ADD FOOD BY MEAL =====" << endl;
        cout << "1. Breakfast" << endl;
        cout << "2. Lunch" << endl;
        cout << "3. Dinner" << endl;
        cout << "4. Snack" << endl;
        
        int mealChoice = getInput<int>("Select meal type (1-4): ", 1);
        string mealType;
        
        switch (mealChoice) {
            case 1: mealType = "Breakfast"; break;
            case 2: mealType = "Lunch"; break;
            case 3: mealType = "Dinner"; break;
            case 4: mealType = "Snack"; break;
            default: mealType = "Snack";
        }
        
        displayAllFoods();
        
        int foodChoice = getInput<int>("\nSelect a food number (0 to cancel): ", 0);
        if (foodChoice == 0) return;
        
        queue<FoodItem> tempQueue = foodDB;
        FoodItem selectedFood("", 0, 0, 0, 0);
        bool found = false;
        
        for (int i = 1; i <= foodChoice && !tempQueue.empty(); i++) {
            selectedFood = tempQueue.front();
            if (i == foodChoice) found = true;
            tempQueue.pop();
        }
        
        if (found) {
            float portion = getInput<float>("Enter portion size (1.0 = standard): ", 0.1f);
            
            dailyFoods.push(MealRecord(mealType, selectedFood, portion));
            
            float caloriesAdded = selectedFood.calories * portion;
            
            user.currentCalories += caloriesAdded;
            user.currentProtein += selectedFood.protein * portion;
            user.currentCarbs += selectedFood.carbs * portion;
            user.currentFat += selectedFood.fat * portion;
            
            if (mealType == "Breakfast") user.breakfastCalories += caloriesAdded;
            else if (mealType == "Lunch") user.lunchCalories += caloriesAdded;
            else if (mealType == "Dinner") user.dinnerCalories += caloriesAdded;
            else if (mealType == "Snack") user.snackCalories += caloriesAdded;
            
            cout << "\nAdded to " << mealType << ": " << selectedFood.name 
                 << " (" << portion << "x) - " 
                 << caloriesAdded << " calories" << endl;
        } else {
            cout << "Invalid selection." << endl;
        }
    }
    
    void addCustomFood() {
        cout << "\n===== ADD CUSTOM FOOD =====" << endl;
        
        string name = getStringInput("Enter food name: ");
        float calories = getInput<float>("Enter calories: ", 0.0f);
        float protein = getInput<float>("Enter protein (g): ", 0.0f);
        float carbs = getInput<float>("Enter carbs (g): ", 0.0f);
        float fat = getInput<float>("Enter fat (g): ", 0.0f);
        
        FoodItem newFood(name, calories, protein, carbs, fat);
        foodDB.push(newFood);
        cout << "Food added to database successfully!" << endl;
        
        cout << "\nAdd this food to today's intake? (y/n): ";
        char choice;
        cin >> choice;
        cin.ignore();
        
        if (choice == 'y' || choice == 'Y') {
            cout << "\n1. Breakfast\n2. Lunch\n3. Dinner\n4. Snack\n";
            int mealChoice = getInput<int>("Select meal type (1-4): ", 1);
            string mealType;
            
            switch (mealChoice) {
                case 1: mealType = "Breakfast"; break;
                case 2: mealType = "Lunch"; break;
                case 3: mealType = "Dinner"; break;
                case 4: mealType = "Snack"; break;
                default: mealType = "Snack";
            }
            
            float portion = getInput<float>("Enter portion size (1.0 = standard): ", 0.1f);
            
            dailyFoods.push(MealRecord(mealType, newFood, portion));
            
            float caloriesAdded = calories * portion;
            
            user.currentCalories += caloriesAdded;
            user.currentProtein += protein * portion;
            user.currentCarbs += carbs * portion;
            user.currentFat += fat * portion;
            
            if (mealType == "Breakfast") user.breakfastCalories += caloriesAdded;
            else if (mealType == "Lunch") user.lunchCalories += caloriesAdded;
            else if (mealType == "Dinner") user.dinnerCalories += caloriesAdded;
            else if (mealType == "Snack") user.snackCalories += caloriesAdded;
            
            cout << "Food added to " << mealType << "!" << endl;
        }
    }
    
    void displayDailyStatus() {
        cout << "\n===== DAILY NUTRITION STATUS =====" << endl;
        
        cout << "Calories: " << user.currentCalories << "/" << user.dailyCalorieTarget 
             << " (" << (user.dailyCalorieTarget - user.currentCalories) << " remaining)" << endl;
        
        cout << "Protein: " << user.currentProtein << "/" << user.dailyProteinTarget << "g" << endl;
        
        cout << "Carbs: " << user.currentCarbs << "/" << user.dailyCarbsTarget << "g" << endl;
        
        cout << "Fat: " << user.currentFat << "/" << user.dailyFatTarget << "g" << endl;
        
        cout << "\n===== CALORIES BY MEAL =====" << endl;
        cout << "Breakfast: " << user.breakfastCalories << " kcal" << endl;
        cout << "Lunch:     " << user.lunchCalories << " kcal" << endl;
        cout << "Dinner:    " << user.dinnerCalories << " kcal" << endl;
        cout << "Snacks:    " << user.snackCalories << " kcal" << endl;
        
        if (!dailyFoods.empty()) {
            cout << "\n===== TODAY'S FOODS =====" << endl;
            
            stack<MealRecord> tempStack = dailyFoods;
            
            while (!tempStack.empty()) {
                cout << "- " << tempStack.top().mealType << ": " << tempStack.top().food.name 
                     << " (" << tempStack.top().portion << "x) - " 
                     << (tempStack.top().food.calories * tempStack.top().portion) 
                     << " kcal" << endl;
                tempStack.pop();
            }
        }
        
        cout << "\nPress Enter to continue...";
        cin.get();
    }
    
    void resetDailyIntake() {
        cout << "Are you sure you want to reset today's intake? (y/n): ";
        char choice;
        cin >> choice;
        cin.ignore();
        
        if (choice == 'y' || choice == 'Y') {
            user.currentCalories = 0;
            user.currentProtein = 0;
            user.currentCarbs = 0;
            user.currentFat = 0;
            user.breakfastCalories = 0;
            user.lunchCalories = 0;
            user.dinnerCalories = 0;
            user.snackCalories = 0;
            
            while (!dailyFoods.empty()) {
                dailyFoods.pop();
            }
            
            cout << "Daily intake has been reset." << endl;
        }
    }
    
    void run() {
        bool profileCreated = false;
        
        while (true) {
            cout << "\n========== NUTRITION TRACKER ==========\n" << endl;
            
            if (!profileCreated) {
                cout << "1. Create User Profile" << endl;
                cout << "2. Exit" << endl;
                
                int choice = getInput<int>("\nEnter your choice: ", 1);
                
                switch (choice) {
                    case 1:
                        setupUserProfile();
                        profileCreated = true;
                        break;
                    case 2:
                        cout << "Exiting application. Goodbye!" << endl;
                        return;
                    default:
                        cout << "Invalid option. Please try again." << endl;
                }
            } else {
                cout << "Welcome back, " << user.name << "!" << endl;
                cout << "Calories: " << user.currentCalories << "/" << user.dailyCalorieTarget << " kcal" << endl;
                
                cout << "\n1. View Profile" << endl;
                cout << "2. View Food Database" << endl;
                cout << "3. Add Food to Daily Intake" << endl;
                cout << "4. Add Custom Food" << endl;
                cout << "5. View Daily Nutrition Status" << endl;
                cout << "6. Reset Daily Intake" << endl;
                cout << "7. Exit" << endl;
                
                int choice = getInput<int>("\nEnter your choice: ", 1);
                
                switch (choice) {
                    case 1:
                        displayUserProfile();
                        break;
                    case 2:
                        displayAllFoods();
                        break;
                    case 3:
                        addFoodByMeal();
                        break;
                    case 4:
                        addCustomFood();
                        break;
                    case 5:
                        displayDailyStatus();
                        break;
                    case 6:
                        resetDailyIntake();
                        break;
                    case 7:
                        cout << "Exiting application. Goodbye, " << user.name << "!" << endl;
                        return;
                    default:
                        cout << "Invalid option. Please try again." << endl;
                }
            }
        }
    }
};

int main() {
    NutritionTracker tracker;
    tracker.run();
    return 0;
}